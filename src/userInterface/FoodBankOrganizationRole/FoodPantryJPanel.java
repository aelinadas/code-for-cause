/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.FoodBankOrganizationRole;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.organization.DoctorOrganization;
import business.organization.NutritionistOrganization;
import business.organization.Organization;
import business.organization.PantryOrganization;
import business.userAccount.UserAccount;
import business.workQueue.DoctorRequest;
import business.workQueue.NutritionistWorkRequest;
import business.workQueue.PantryWorkRequest;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aelinadas
 */
public class FoodPantryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FoodPantryJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Organization organization;
    private EcoSystem ecoSystem;

    public FoodPantryJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.ecoSystem = ecoSystem;
        populateRequestTable();
        setInitial();
        this.setBackground(new Color(255, 255, 255));
        this.setSize(1440, 900);
    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblFoodPantryRequest.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            if (request instanceof DoctorRequest) {
                DoctorRequest doctorRequest = (DoctorRequest) request;
                if (doctorRequest.getDoctorMsg() != null && !doctorRequest.getDoctorMsg().equalsIgnoreCase("")) {
                    row[0] = doctorRequest.getDoctorMsg();
                } else {
                    row[0] = row[0] = request.getMessage();
                }
            }
            if (request instanceof NutritionistWorkRequest) {
                NutritionistWorkRequest nutritionistWorkRequest = (NutritionistWorkRequest) request;
                if (nutritionistWorkRequest.getNutritionistMsg() != null && !nutritionistWorkRequest.getNutritionistMsg().equalsIgnoreCase("")) {
                    row[0] = nutritionistWorkRequest.getNutritionistMsg();
                } else {
                    row[0] = request.getMessage();
                }
            }
            if (request instanceof PantryWorkRequest) {
                PantryWorkRequest pantryWorkRequest = (PantryWorkRequest) request;
                row[0] = request.getMessage();
            }
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            if (request instanceof PantryWorkRequest) {
                row[3] = "Food Order";
            }
            if (request instanceof DoctorRequest) {
                row[3] = "Health Screening";
            }
            if (request instanceof NutritionistWorkRequest) {
                row[3] = "Nutritionist Suggestion";
            }
            model.addRow(row);
        }
    }

    public void setInitial() {
        numberLabel.setVisible(false);
        expectedTextField.setVisible(false);
        expectedTextField.setText("");
        msgTextField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        OrderRequestPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFoodPantryRequest = new javax.swing.JTable();
        refreshTestJButton = new javax.swing.JButton();
        makeRequestPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        requestTypeComboBox = new javax.swing.JComboBox<>();
        msgLabel = new javax.swing.JLabel();
        msgTextField = new javax.swing.JTextField();
        numberLabel = new javax.swing.JLabel();
        expectedTextField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        enterpriseNameComboBox = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        OrderRequestPanel.setBackground(new java.awt.Color(255, 255, 255));

        tblFoodPantryRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Receiver", "Status", "Request Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblFoodPantryRequest);

        refreshTestJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OrderRequestPanelLayout = new javax.swing.GroupLayout(OrderRequestPanel);
        OrderRequestPanel.setLayout(OrderRequestPanelLayout);
        OrderRequestPanelLayout.setHorizontalGroup(
            OrderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrderRequestPanelLayout.createSequentialGroup()
                .addContainerGap(1342, Short.MAX_VALUE)
                .addComponent(refreshTestJButton)
                .addGap(27, 27, 27))
            .addGroup(OrderRequestPanelLayout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        OrderRequestPanelLayout.setVerticalGroup(
            OrderRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrderRequestPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("View My Orders/ Work Request", OrderRequestPanel);

        makeRequestPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Enterprise Name:");

        jLabel2.setText("Request Type:");

        requestTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Health Screening", "Nutrionist" }));
        requestTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTypeComboBoxActionPerformed(evt);
            }
        });

        msgLabel.setText("Message:");

        numberLabel.setText("Expected Number*:");

        expectedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                expectedTextFieldKeyTyped(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout makeRequestPanelLayout = new javax.swing.GroupLayout(makeRequestPanel);
        makeRequestPanel.setLayout(makeRequestPanelLayout);
        makeRequestPanelLayout.setHorizontalGroup(
            makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makeRequestPanelLayout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(makeRequestPanelLayout.createSequentialGroup()
                        .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numberLabel))
                        .addGap(18, 18, 18)
                        .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(requestTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enterpriseNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(expectedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(makeRequestPanelLayout.createSequentialGroup()
                        .addComponent(msgLabel)
                        .addGap(89, 89, 89)
                        .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton)
                            .addComponent(msgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(690, Short.MAX_VALUE))
        );
        makeRequestPanelLayout.setVerticalGroup(
            makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(makeRequestPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(requestTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expectedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(makeRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msgLabel))
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addContainerGap(587, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Make Request                      ", makeRequestPanel);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Dashboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(364, 364, 364)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateRequestTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void requestTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTypeComboBoxActionPerformed
        // TODO add your handling code here:
        String requestType = requestTypeComboBox.getSelectedItem().toString();
        if (requestType.equals("Health Screening")) {
            numberLabel.setVisible(true);
            expectedTextField.setVisible(true);
            expectedTextField.setText("");
            enterpriseNameComboBox.removeAllItems();
            for (Enterprise enterprise : organization.getNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Hospital) {
                    if (!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()) {
                        Boolean hasDoctor = false;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof DoctorOrganization) {
                                hasDoctor = true;
                                break;
                            }
                        }
                        if (hasDoctor) {
                            enterpriseNameComboBox.addItem(enterprise);
                        }
                    }
                }
            }
        }
        if (requestType.equals("Nutrionist")) {
            numberLabel.setVisible(false);
            expectedTextField.setVisible(false);
            expectedTextField.setText("");
            enterpriseNameComboBox.removeAllItems();
            for (Enterprise enterprise : organization.getNetwork().getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType() == Enterprise.EnterpriseType.Hospital) {
                    if (!enterprise.getOrganizationDirectory().getOrganizationList().isEmpty()) {
                        Boolean hasNutrionist = false;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof NutritionistOrganization) {
                                hasNutrionist = true;
                                break;
                            }
                        }
                        if (hasNutrionist) {
                            enterpriseNameComboBox.addItem(enterprise);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_requestTypeComboBoxActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if (numberLabel.isVisible() && expectedTextField.isVisible()) {
            if (!expectedTextField.getText().trim().equalsIgnoreCase("")) {
                if (enterpriseNameComboBox.getSelectedItem() != null) {
                    DoctorRequest doctorRequest = new DoctorRequest();
                    doctorRequest.setAddress(((PantryOrganization) organization).getAddress());
                    doctorRequest.setZipCode(((PantryOrganization) organization).getZipCode());
                    doctorRequest.setExpectedPpl(Integer.parseInt(expectedTextField.getText().trim()));
                    doctorRequest.setMessage(msgTextField.getText().trim());
                    doctorRequest.setSender(userAccount);
                    doctorRequest.setStatus("HEALTH SCREENING REQUEST SENT");
                    Enterprise enterprise = (Enterprise) enterpriseNameComboBox.getSelectedItem();
                    Organization org = null;
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof DoctorOrganization) {
                            org = organization;
                            org.getWorkQueue().getWorkRequestList().add(doctorRequest);
                        }
                    }
                    if (org != null) {
                        userAccount.getWorkQueue().getWorkRequestList().add(doctorRequest);
                        JOptionPane.showMessageDialog(null, "Your request has been raised successfully. Track you request status on Work Request panel. Thank You.");
                        setInitial();
                        populateRequestTable();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter expected number of people.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else {
            if (enterpriseNameComboBox.getSelectedItem() != null) {
                NutritionistWorkRequest nutritionistWorkRequest = new NutritionistWorkRequest();
                nutritionistWorkRequest.setAddress(((PantryOrganization) organization).getAddress());
                nutritionistWorkRequest.setZipCode(((PantryOrganization) organization).getZipCode());
                nutritionistWorkRequest.setMessage(msgTextField.getText().trim());
                nutritionistWorkRequest.setSender(userAccount);
                nutritionistWorkRequest.setStatus("NUTRITIONIST HELP REQUEST SENT");
                Enterprise enterprise = (Enterprise) enterpriseNameComboBox.getSelectedItem();
                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof NutritionistOrganization) {
                        org = organization;
                        org.getWorkQueue().getWorkRequestList().add(nutritionistWorkRequest);
                    }
                }
                if (org != null) {
                    userAccount.getWorkQueue().getWorkRequestList().add(nutritionistWorkRequest);
                    JOptionPane.showMessageDialog(null, "Your request has been raised successfully. Track you request status on Work Request panel. Thank You.");
                    setInitial();
                    populateRequestTable();
                }
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void expectedTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expectedTextFieldKeyTyped
        // TODO add your handling code here:
        char enteredChar = evt.getKeyChar();
        if (!Character.isDigit(enteredChar) || (enteredChar == KeyEvent.VK_BACK_SPACE) || (enteredChar == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
    }//GEN-LAST:event_expectedTextFieldKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel OrderRequestPanel;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox enterpriseNameComboBox;
    private javax.swing.JTextField expectedTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel makeRequestPanel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JTextField msgTextField;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JComboBox<String> requestTypeComboBox;
    private javax.swing.JButton submitButton;
    private javax.swing.JTable tblFoodPantryRequest;
    // End of variables declaration//GEN-END:variables
}
