/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.FoodBankOrganizationRole;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.foodItem.FoodItem;
import business.organization.FoodPackerOrganization;
import business.organization.LogisticOrganization;
import business.organization.Organization;
import business.userAccount.UserAccount;
import business.workQueue.PantryWorkRequest;
import business.workQueue.WorkRequest;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aelinadas
 */
public class FoodPackerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FoodPackerJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private FoodPackerOrganization foodPackerOrganization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;

    public FoodPackerJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.foodPackerOrganization = (FoodPackerOrganization) organization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        initComponents();
        populateResponseTable();
        setInitial();
        this.setBackground(new Color(255, 255, 255));
        this.setSize(1440, 900);
    }

    public void populateResponseTable() {
        DefaultTableModel model = (DefaultTableModel) tblFoodPantryResponse.getModel();
        model.setRowCount(0);
        for (WorkRequest request : foodPackerOrganization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender();
            row[2] = ((PantryWorkRequest) request).getPackerUserAccount() == null ? null : ((PantryWorkRequest) request).getPackerUserAccount().getUsername();
            row[3] = request.getStatus();
            model.addRow(row);
        }
    }

    public void setInitial() {
        orderJPanel.setVisible(false);
        jLabel1.setVisible(false);
        orderjTable.setVisible(false);
        cancelBtn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        tblFoodPantryResponse = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnUnassigned = new javax.swing.JButton();
        btnPacked = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        orderJPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        cancelBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        tblFoodPantryResponse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Packer", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblFoodPantryResponse);

        btnAssign.setText("Assign");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnUnassigned.setText("Unassign");
        btnUnassigned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnassignedActionPerformed(evt);
            }
        });

        btnPacked.setText("Packed");
        btnPacked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPackedActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        refreshTestJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Quantity (Pounds)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderjTable);
        if (orderjTable.getColumnModel().getColumnCount() > 0) {
            orderjTable.getColumnModel().getColumn(0).setResizable(false);
            orderjTable.getColumnModel().getColumn(1).setResizable(false);
        }

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Items To Be Packed");

        javax.swing.GroupLayout orderJPanelLayout = new javax.swing.GroupLayout(orderJPanel);
        orderJPanel.setLayout(orderJPanelLayout);
        orderJPanelLayout.setHorizontalGroup(
            orderJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderJPanelLayout.createSequentialGroup()
                .addContainerGap(155, Short.MAX_VALUE)
                .addGroup(orderJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderJPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(241, 241, 241))))
        );
        orderJPanelLayout.setVerticalGroup(
            orderJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addGroup(orderJPanelLayout.createSequentialGroup()
                        .addComponent(cancelBtn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Dashboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(486, 486, 486)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshTestJButton)
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(orderJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPacked, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAssign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUnassigned, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(561, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btnAssign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUnassigned)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPacked)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(orderJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(341, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFoodPantryResponse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0)).getStatus().equalsIgnoreCase("WITH LOGISTICS")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            PantryWorkRequest labRequest = (PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0);
            if (!labRequest.isAlreadyAssignedPacker()) {
                labRequest.setAlreadyAssignedPacker(true);
                labRequest.setReceiver(userAccount);
                labRequest.setPackerUserAccount(userAccount);
                labRequest.setStatus("PACKING");
                populateResponseTable();
            } else {
                JOptionPane.showMessageDialog(null, "This request has already been assigned.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnUnassignedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnassignedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFoodPantryResponse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0)).getStatus().equalsIgnoreCase("WITH LOGISTICS") || ((PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0)).isForward()) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            PantryWorkRequest labRequest = (PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0);
            if (labRequest.isAlreadyAssignedPacker() && labRequest.getReceiver().getUsername().equals(userAccount.getUsername())) {
                labRequest.setAlreadyAssignedPacker(false);
                labRequest.setPackerUserAccount(null);
                labRequest.setReceiver(null);
                labRequest.setStatus("ORDER PLACED");
                populateResponseTable();
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnUnassignedActionPerformed

    private void btnPackedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPackedActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFoodPantryResponse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to view details.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        PantryWorkRequest pantryWorkRequest = (PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0);
        if (pantryWorkRequest.getStatus().equalsIgnoreCase("WITH LOGISTICS") || pantryWorkRequest.isForward()) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (pantryWorkRequest.getPackerUserAccount() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself, before processing.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if (pantryWorkRequest.getPackerUserAccount().getUsername().equals(userAccount.getUsername())) {
                pantryWorkRequest.setStatus("WITH LOGISTICS");
                pantryWorkRequest.setPackerUserAccount(userAccount);
                pantryWorkRequest.setReceiver(null);
                pantryWorkRequest.setForward(true);

                Organization org = null;
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof LogisticOrganization) {
                        org = organization;
                        break;
                    }
                }
                if (org != null) {
                    org.getWorkQueue().getWorkRequestList().add(pantryWorkRequest);
                    userAccount.getWorkQueue().getWorkRequestList().add(pantryWorkRequest);
                }
                populateResponseTable();
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

    }//GEN-LAST:event_btnPackedActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFoodPantryResponse.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to view details.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            orderJPanel.setVisible(true);
            jLabel1.setVisible(true);
            orderjTable.setVisible(true);
            cancelBtn.setVisible(true);
            PantryWorkRequest pantryWorkRequest = (PantryWorkRequest) tblFoodPantryResponse.getValueAt(selectedRow, 0);
            DefaultTableModel model = (DefaultTableModel) orderjTable.getModel();
            model.setRowCount(0);
            if (pantryWorkRequest.getGroceryList() != null && !pantryWorkRequest.getGroceryList().isEmpty()) {
                for (FoodItem foodItem : pantryWorkRequest.getGroceryList()) {
                    if (foodItem.getQuantity() != 0) {
                        Object[] row = new Object[2];
                        row[0] = foodItem;
                        row[1] = foodItem.getQuantity();
                        model.addRow(row);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateResponseTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        setInitial();
    }//GEN-LAST:event_cancelBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnPacked;
    private javax.swing.JButton btnUnassigned;
    private javax.swing.JButton btnView;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel orderJPanel;
    private javax.swing.JTable orderjTable;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JTable tblFoodPantryResponse;
    // End of variables declaration//GEN-END:variables
}
