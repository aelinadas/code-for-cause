/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Doctor;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.organization.DoctorOrganization;
import business.organization.LabAssitantOrganization;
import business.organization.Organization;
import static business.triggerEmail.TriggerEmail.doctorAppointmentEmail;
import business.userAccount.UserAccount;
import business.workQueue.DoctorRequest;
import business.workQueue.LabRequest;
import business.workQueue.WorkRequest;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private DoctorRequest toBeEdited;

    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        setInitial();
        populateRequestTable();
        setTab2Initial();
        populateTable();
        jDateChooser.setDate(new Date());
        jDateChooser.setMinSelectableDate(new Date());
        JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser.getDateEditor();
        editor.setEditable(false);
        JFormattedTextField formattedTextField = ((JSpinner.DefaultEditor) timeSpinner.getEditor()).getTextField();
        formattedTextField.setEditable(false);
        formattedTextField.setBackground(Color.white);
        this.setSize(1440, 900);
    }

    public void setInitial() {
        typeLabel.setVisible(false);
        jComboBox.setVisible(false);
        idLabel.setVisible(false);
        idTextField.setVisible(false);
        idTextField.setText("");
        msgLabel.setVisible(false);
        msgTextField.setVisible(false);
        msgTextField.setText("");
        submitButton.setVisible(false);
        cancelButton.setVisible(false);
        helpLabel.setVisible(false);
    }

    public void setTab2Initial() {
        dateLabel.setVisible(false);
        jDateChooser.setVisible(false);
        timeLabel.setVisible(false);
        timeSpinner.setVisible(false);
        cancelTab2Button.setVisible(false);
        submitTab2Button.setVisible(false);
    }

    public boolean isAlphaNumeric(String s) {
        String pattern = "^[a-zA-Z]{3}\\d{3}$";
        return s.matches(pattern);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        jComboBox = new javax.swing.JComboBox<>();
        idTextField = new javax.swing.JTextField();
        msgTextField = new javax.swing.JTextField();
        msgLabel = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        helpLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workjTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        unassignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        dateLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.HOUR);
        timeSpinner = new javax.swing.JSpinner(sm);
        submitTab2Button = new javax.swing.JButton();
        cancelTab2Button = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Test Type", "Message", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        }

        requestTestJButton.setText("Request Test");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        idLabel.setText("Patient Id*:");

        typeLabel.setText("Test Type:");

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Blood Test", "Lipid Test" }));

        msgLabel.setText("Message:");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        helpLabel.setText("(e.g. Abc123)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestTestJButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(typeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(msgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(idLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(submitButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(idTextField)
                                    .addComponent(msgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpLabel)))
                .addGap(267, 267, 267))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(requestTestJButton)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel)
                    .addComponent(helpLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msgTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msgLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton))
                .addContainerGap(525, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("                                    View / Raise Lab Test Work Requests                           ", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        workjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Pantry Address", "Message", "Receiver", "Status", "Appointment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workjTable);

        assignJButton.setText("Assign");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        unassignJButton.setText("Unassign");
        unassignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unassignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Set Appointment");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        dateLabel.setText("Appointment Date*:");

        timeLabel.setText("Appointment Time*:");

        JSpinner.DateEditor de= new JSpinner.DateEditor(timeSpinner, "HH:mm");
        timeSpinner.setEditor(de);

        submitTab2Button.setText("Fix Appointment");
        submitTab2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitTab2ButtonActionPerformed(evt);
            }
        });

        cancelTab2Button.setText("Cancel");
        cancelTab2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTab2ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(296, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(assignJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unassignJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processJButton)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(submitTab2Button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelTab2Button))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeSpinner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(264, 264, 264))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(assignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unassignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processJButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateLabel)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitTab2Button)
                    .addComponent(cancelTab2Button))
                .addContainerGap(465, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("                                   View My Work                                      ", jPanel2);

        refreshTestJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dashboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(612, 612, 612)
                .addComponent(refreshTestJButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[0] = ((LabRequest) request).getPatientId();
            row[1] = ((LabRequest) request).getTestType();
            row[2] = request.getMessage();
            row[3] = request.getReceiver();
            row[4] = request.getStatus();
            String result = ((LabRequest) request).getTestResult();
            row[5] = result == null ? "Waiting" : result;
            model.addRow(row);
        }
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : ((DoctorOrganization) organization).getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[0] = request.getSender();
            row[2] = request;
            row[1] = ((DoctorRequest) request).getAddress() + " " + ((DoctorRequest) request).getZipCode();
            row[3] = request.getReceiver() == null ? null : request.getReceiver();
            row[4] = request.getStatus();
            row[5] = ((DoctorRequest) request).getDoctorMsg();
            model.addRow(row);
        }
    }

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed
        typeLabel.setVisible(true);
        jComboBox.setVisible(true);
        idLabel.setVisible(true);
        idTextField.setVisible(true);
        idTextField.setText("");
        msgLabel.setVisible(true);
        msgTextField.setVisible(true);
        msgTextField.setText("");
        submitButton.setVisible(true);
        cancelButton.setVisible(true);
        helpLabel.setVisible(true);
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateRequestTable();
        populateTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        setInitial();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if (!idTextField.getText().equalsIgnoreCase("") && isAlphaNumeric(idTextField.getText().trim())) {
            LabRequest labRequest = new LabRequest();
            labRequest.setTestType(jComboBox.getSelectedItem().toString());
            labRequest.setPatientId(idTextField.getText().trim());
            labRequest.setMessage(msgTextField.getText().trim());
            labRequest.setSender(userAccount);
            labRequest.setStatus("SENT");
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof LabAssitantOrganization) {
                    org = organization;
                    break;
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(labRequest);
                userAccount.getWorkQueue().getWorkRequestList().add(labRequest);
            }
            setInitial();
            populateRequestTable();
        } else {
            JOptionPane.showMessageDialog(null, "Please enter valid Patient ID.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((DoctorRequest) workjTable.getValueAt(selectedRow, 2)).getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            DoctorRequest doctorRequest = (DoctorRequest) workjTable.getValueAt(selectedRow, 2);
            if (!doctorRequest.isAssigned()) {
                doctorRequest.setAssigned(true);
                doctorRequest.setReceiver(userAccount);
                doctorRequest.setStatus("PENDING");
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "This request has already been assigned.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void unassignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unassignJButtonActionPerformed
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((DoctorRequest) workjTable.getValueAt(selectedRow, 2)).getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            DoctorRequest doctorRequest = (DoctorRequest) workjTable.getValueAt(selectedRow, 2);
            if (doctorRequest.isAssigned() && doctorRequest.getReceiver().getUsername().equals(userAccount.getUsername())) {
                doctorRequest.setAssigned(false);
                doctorRequest.setReceiver(null);
                doctorRequest.setStatus("HEALTH SCREENING REQUEST SENT");
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_unassignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to set appointment.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DoctorRequest doctorRequest = (DoctorRequest) workjTable.getValueAt(selectedRow, 2);
        if (doctorRequest.getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (doctorRequest.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself, before setting up an appointment.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if (doctorRequest.getReceiver().getUsername().equals(userAccount.getUsername())) {
                dateLabel.setVisible(true);
                jDateChooser.setVisible(true);
                timeLabel.setVisible(true);
                timeSpinner.setVisible(true);
                cancelTab2Button.setVisible(true);
                submitTab2Button.setVisible(true);
                toBeEdited = doctorRequest;
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void submitTab2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitTab2ButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(jDateChooser.getDate());
        String[] time = timeSpinner.getValue().toString().split(" ");
        String[] pretimeStamp = time[3].split(":");
        String timeStamp = pretimeStamp[0] + ":" + pretimeStamp[1];
        if (date.equalsIgnoreCase("") || timeStamp.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please set both appointment date and time.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            
            boolean isconflict = false;
            for (WorkRequest request : ((DoctorOrganization) organization).getWorkQueue().getWorkRequestList()) {
                DoctorRequest doctorRequest = (DoctorRequest) request;
                if (doctorRequest.getReceiver() != null && doctorRequest.getReceiver().getUsername().equals(userAccount.getUsername()) && doctorRequest.getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
                    String appointment = doctorRequest.getDoctorMsg();
                    if (appointment.equalsIgnoreCase("Date: " + date + ", " + "Time: " + timeStamp)) {
                        isconflict = true;
                        break;
                    }
                }
            }

            if (isconflict) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogValue = JOptionPane.showConfirmDialog(null, "You already have an appointemnt on this date and time. Do you still wish to set this appointment?", "Message", dialogButton);
                if (dialogValue == JOptionPane.YES_OPTION) {
                    if (toBeEdited != null) {
                        toBeEdited.setDoctorMsg("Date: " + date + ", " + "Time: " + timeStamp);
                        toBeEdited.setStatus("APPOINTMENT FIXED");
                        setTab2Initial();
                        populateTable();
                        doctorAppointmentEmail(toBeEdited.getSender().getUsername(), toBeEdited.getSender().getEmployee().getName(), enterprise.getName(), date, timeStamp, toBeEdited.getAddress() + ", " + toBeEdited.getZipCode());
                    }
                }
            } else {
                if (toBeEdited != null) {
                    toBeEdited.setDoctorMsg("Date: " + date + ", " + "Time: " + timeStamp);
                    toBeEdited.setStatus("APPOINTMENT FIXED");
                    setTab2Initial();
                    populateTable();
                    doctorAppointmentEmail(toBeEdited.getSender().getUsername(), toBeEdited.getSender().getEmployee().getName(), enterprise.getName(), date, timeStamp, toBeEdited.getAddress() + ", " + toBeEdited.getZipCode());
                }
            }

        }
    }//GEN-LAST:event_submitTab2ButtonActionPerformed

    private void cancelTab2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTab2ButtonActionPerformed
        // TODO add your handling code here:
        setTab2Initial();
    }//GEN-LAST:event_cancelTab2ButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelTab2Button;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JComboBox<String> jComboBox;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JTextField msgTextField;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton submitTab2Button;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton unassignJButton;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workjTable;
    // End of variables declaration//GEN-END:variables
}
