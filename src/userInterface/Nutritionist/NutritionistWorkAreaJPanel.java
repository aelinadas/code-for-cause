/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.Nutritionist;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.organization.NutritionistOrganization;
import business.organization.Organization;
import static business.triggerEmail.TriggerEmail.nutritionAppointmentEmail;
import business.userAccount.UserAccount;
import business.workQueue.NutritionistWorkRequest;
import business.workQueue.WorkRequest;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class NutritionistWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NutritionistWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private NutritionistOrganization nutritionistOrganization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private NutritionistWorkRequest toBeEdited;

    public NutritionistWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.nutritionistOrganization = (NutritionistOrganization) organization;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        initComponents();
        setInitial();
        populateTable();
        jDateChooser.setDate(new Date());
        jDateChooser.setMinSelectableDate(new Date());
        JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser.getDateEditor();
        editor.setEditable(false);
        JFormattedTextField formattedTextField = ((JSpinner.DefaultEditor) timeSpinner.getEditor()).getTextField();
        formattedTextField.setEditable(false);
        formattedTextField.setBackground(Color.white);
        this.setSize(1440, 900);
    }

    public void setInitial() {
        dateLabel.setVisible(false);
        jDateChooser.setVisible(false);
        timeLabel.setVisible(false);
        timeSpinner.setVisible(false);
        cancelButton.setVisible(false);
        submitButton.setVisible(false);
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : nutritionistOrganization.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[6];
            row[0] = request.getSender();
            row[2] = request;
            row[1] = ((NutritionistWorkRequest) request).getAddress() + " " + ((NutritionistWorkRequest) request).getZipCode();
            row[3] = request.getReceiver() == null ? null : request.getReceiver();
            row[4] = request.getStatus();
            row[5] = ((NutritionistWorkRequest) request).getNutritionistMsg();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workjTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        unassignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        Date date = new Date();
        SpinnerDateModel sm = new SpinnerDateModel(date, null, null, Calendar.HOUR);
        timeSpinner = new javax.swing.JSpinner(sm);
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        refreshTestJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        workjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Pantry Address", "Message", "Receiver", "Status", "Appointment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workjTable);

        assignJButton.setText("Assign");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        unassignJButton.setText("Unassign");
        unassignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unassignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Set Appointment");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        timeLabel.setText("Appointment Time*:");

        dateLabel.setText("Appointment Date*:");

        JSpinner.DateEditor de= new JSpinner.DateEditor(timeSpinner, "HH:mm");
        timeSpinner.setEditor(de);

        submitButton.setText("Fix Appointment");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dashboard");

        refreshTestJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshTestJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        refreshTestJButton.setBorder(null);
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(457, 457, 457)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshTestJButton)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(submitButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(assignJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unassignJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processJButton))))
                .addContainerGap(401, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(refreshTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unassignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((NutritionistWorkRequest) workjTable.getValueAt(selectedRow, 2)).getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            NutritionistWorkRequest nutritionistWorkRequest = (NutritionistWorkRequest) workjTable.getValueAt(selectedRow, 2);
            if (!nutritionistWorkRequest.isAssigned()) {
                nutritionistWorkRequest.setAssigned(true);
                nutritionistWorkRequest.setReceiver(userAccount);
                nutritionistWorkRequest.setStatus("PENDING");
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "This request has already been assigned.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void unassignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unassignJButtonActionPerformed
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (((NutritionistWorkRequest) workjTable.getValueAt(selectedRow, 2)).getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            NutritionistWorkRequest nutritionistWorkRequest = (NutritionistWorkRequest) workjTable.getValueAt(selectedRow, 2);
            if (nutritionistWorkRequest.isAssigned() && nutritionistWorkRequest.getReceiver().getUsername().equals(userAccount.getUsername())) {
                nutritionistWorkRequest.setAssigned(false);
                nutritionistWorkRequest.setReceiver(null);
                nutritionistWorkRequest.setStatus("NUTRITIONIST HELP REQUEST SENT");
                populateTable();
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_unassignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to view details.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        NutritionistWorkRequest nutritionistWorkRequest = (NutritionistWorkRequest) workjTable.getValueAt(selectedRow, 2);
        if (nutritionistWorkRequest.getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
            JOptionPane.showMessageDialog(null, "This request has already been completed.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (nutritionistWorkRequest.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself, before setting up an appointment.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if (nutritionistWorkRequest.getReceiver().getUsername().equals(userAccount.getUsername())) {
                dateLabel.setVisible(true);
                jDateChooser.setVisible(true);
                timeLabel.setVisible(true);
                timeSpinner.setVisible(true);
                cancelButton.setVisible(true);
                submitButton.setVisible(true);
                toBeEdited = nutritionistWorkRequest;
            } else {
                JOptionPane.showMessageDialog(null, "Sorry, this work request is not assigned with you.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        setInitial();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(jDateChooser.getDate());
        String[] time = timeSpinner.getValue().toString().split(" ");
        String[] pretimeStamp = time[3].split(":");
        String timeStamp = pretimeStamp[0] + ":" + pretimeStamp[1];
        if (date.equalsIgnoreCase("") || timeStamp.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please set both appointment date and time.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {

            boolean isconflict = false;
            for (WorkRequest request : nutritionistOrganization.getWorkQueue().getWorkRequestList()) {
                NutritionistWorkRequest nutritionistWorkRequest = (NutritionistWorkRequest) request;
                if (nutritionistWorkRequest.getReceiver() != null && nutritionistWorkRequest.getReceiver().getUsername().equals(userAccount.getUsername()) && nutritionistWorkRequest.getStatus().equalsIgnoreCase("APPOINTMENT FIXED")) {
                    String appointment = nutritionistWorkRequest.getNutritionistMsg();
                    if (appointment.equalsIgnoreCase("Date: " + date + ", " + "Time: " + timeStamp)) {
                        isconflict = true;
                        break;
                    }
                }
            }

            if (isconflict) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogValue = JOptionPane.showConfirmDialog(null, "You already have an appointemnt on this date and time. Do you still wish to set this appointment?", "Message", dialogButton);
                if (dialogValue == JOptionPane.YES_OPTION) {
                    if (toBeEdited != null) {
                        toBeEdited.setNutritionistMsg("Date: " + date + ", " + "Time: " + timeStamp);
                        toBeEdited.setStatus("APPOINTMENT FIXED");
                        setInitial();
                        populateTable();
                        nutritionAppointmentEmail(toBeEdited.getSender().getUsername(), toBeEdited.getSender().getEmployee().getName(), enterprise.getName(), date, timeStamp, toBeEdited.getAddress() + ", " + toBeEdited.getZipCode());
                    }
                }
            } else {
                if (toBeEdited != null) {
                    toBeEdited.setNutritionistMsg("Date: " + date + ", " + "Time: " + timeStamp);
                    toBeEdited.setStatus("APPOINTMENT FIXED");
                    setInitial();
                    populateTable();
                    nutritionAppointmentEmail(toBeEdited.getSender().getUsername(), toBeEdited.getSender().getEmployee().getName(), enterprise.getName(), date, timeStamp, toBeEdited.getAddress() + ", " + toBeEdited.getZipCode());
                }
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshTestJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel dateLabel;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JButton unassignJButton;
    private javax.swing.JTable workjTable;
    // End of variables declaration//GEN-END:variables
}
